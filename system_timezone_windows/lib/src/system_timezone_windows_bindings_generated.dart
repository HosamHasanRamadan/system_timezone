// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `windows/src/system_timezone_windows.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class SystemTimezoneBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SystemTimezoneBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SystemTimezoneBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<MyString> timezone() {
    return _timezone();
  }

  late final _timezonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MyString> Function()>>('timezone');
  late final _timezone =
      _timezonePtr.asFunction<ffi.Pointer<MyString> Function()>();

  ffi.Pointer<MyList> timezones() {
    return _timezones();
  }

  late final _timezonesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MyList> Function()>>('timezones');
  late final _timezones =
      _timezonesPtr.asFunction<ffi.Pointer<MyList> Function()>();

  void free_pointer_mylist(
    ffi.Pointer<MyList> ptr,
  ) {
    return _free_pointer_mylist(
      ptr,
    );
  }

  late final _free_pointer_mylistPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyList>)>>(
          'free_pointer_mylist');
  late final _free_pointer_mylist =
      _free_pointer_mylistPtr.asFunction<void Function(ffi.Pointer<MyList>)>();

  void free_pointer_mystring(
    ffi.Pointer<MyString> ptr,
  ) {
    return _free_pointer_mystring(
      ptr,
    );
  }

  late final _free_pointer_mystringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyString>)>>(
          'free_pointer_mystring');
  late final _free_pointer_mystring = _free_pointer_mystringPtr
      .asFunction<void Function(ffi.Pointer<MyString>)>();
}

final class MyString extends ffi.Struct {
  external ffi.Pointer<ffi.Char> stringValue;

  @ffi.Int()
  external int stringSize;
}

final class MyList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Char>> listValue;

  @ffi.Int()
  external int listSize;

  @ffi.Int()
  external int listElementSize;
}
