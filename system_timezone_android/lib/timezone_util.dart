// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: com.example.verygoodcore.TimeZoneUtil$Companion
class TimeZoneUtil_Companion extends jni.JObject {
  @override
  late final jni.JObjType<TimeZoneUtil_Companion> $type = type;

  TimeZoneUtil_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"com/example/verygoodcore/TimeZoneUtil$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $TimeZoneUtil_CompanionType();
  static final _id_getLocalTimezone = _class.instanceMethodId(
    r"getLocalTimezone",
    r"()Ljava/lang/String;",
  );

  static final _getLocalTimezone = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getLocalTimezone()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLocalTimezone() {
    return _getLocalTimezone(
            reference.pointer, _id_getLocalTimezone as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAvailableTimezones = _class.instanceMethodId(
    r"getAvailableTimezones",
    r"()Ljava/util/List;",
  );

  static final _getAvailableTimezones = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.List getAvailableTimezones()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JString> getAvailableTimezones() {
    return _getAvailableTimezones(
            reference.pointer, _id_getAvailableTimezones as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JStringType()));
  }

  static final _id_new0 = _class.constructorId(
    r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeZoneUtil_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return TimeZoneUtil_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $TimeZoneUtil_CompanionType
    extends jni.JObjType<TimeZoneUtil_Companion> {
  const $TimeZoneUtil_CompanionType();

  @override
  String get signature => r"Lcom/example/verygoodcore/TimeZoneUtil$Companion;";

  @override
  TimeZoneUtil_Companion fromReference(jni.JReference reference) =>
      TimeZoneUtil_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($TimeZoneUtil_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TimeZoneUtil_CompanionType) &&
        other is $TimeZoneUtil_CompanionType;
  }
}

/// from: com.example.verygoodcore.TimeZoneUtil
class TimeZoneUtil extends jni.JObject {
  @override
  late final jni.JObjType<TimeZoneUtil> $type = type;

  TimeZoneUtil.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"com/example/verygoodcore/TimeZoneUtil");

  /// The type which includes information such as the signature of this class.
  static const type = $TimeZoneUtilType();
  static final _id_Companion = _class.staticFieldId(
    r"Companion",
    r"Lcom/example/verygoodcore/TimeZoneUtil$Companion;",
  );

  /// from: static public final com.example.verygoodcore.TimeZoneUtil$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static TimeZoneUtil_Companion get Companion =>
      _id_Companion.get(_class, const $TimeZoneUtil_CompanionType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeZoneUtil() {
    return TimeZoneUtil.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }
}

final class $TimeZoneUtilType extends jni.JObjType<TimeZoneUtil> {
  const $TimeZoneUtilType();

  @override
  String get signature => r"Lcom/example/verygoodcore/TimeZoneUtil;";

  @override
  TimeZoneUtil fromReference(jni.JReference reference) =>
      TimeZoneUtil.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($TimeZoneUtilType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TimeZoneUtilType) &&
        other is $TimeZoneUtilType;
  }
}
